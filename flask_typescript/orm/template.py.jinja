

{%- for name, enums in enums %}
class {{name}}(PyEnum):
{% for n, pyname in enums %}
    {{pyname}} = "{{n}}"
{%- endfor %}

{% endfor %}

{%- for name, values in sets %}
Literal_{{name}}: TypeAlias = Literal[{% for n in values -%}
"{{n}}"{%- if not loop.last%}, {% endif -%}
{%- endfor %}]
{{name}} = SET(*get_args(Literal_{{name}}))
{% endfor %}


# original name: {%if schema %}{{schema}}.{% endif %}{{tablename}}
class {{model}}{% if not abstract %}({{base}}){% endif %}:
    {% if abstract %}__abstract__ = True{% endif -%}
    {% if with_tablename %}__tablename__ = "{{tablename}}"{% endif %}
{% for c in columns %}
    {{c.column_name}}: Mapped[{{c.python_type}}] = mapped_column({% if c.column_name != c.name -%}"{{c.name}}", {% endif %}{{c.type}}
        {%- if not c.nullable %}, nullable=False{% endif %}
        {%- if c.index %}, index=True{%- endif %}
        {%- if c.unique %}, unique=True{% endif %}
        {%- if c.pk %}, primary_key=True{% endif %}
        {%- if c.server_default %}, server_default={{c.server_default}}{%endif%})
{%- endfor %}
{% if indexes or schema %}
    __table_args__ = (
    {%- for c in indexes %}
        Index("{{ c.name }}",{% for col in c.columns %} "{{col.name}}",  {% endfor %} unique={{c.unique}}),
    {%- endfor %}{% if schema %}{{ '{' }}"schema": "{{schema}}"{{ '}' }}{% endif -%}
    )
{% endif %}
